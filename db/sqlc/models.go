// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ProductStatusess string

const (
	ProductStatusessPending ProductStatusess = "pending"
	ProductStatusessSuccess ProductStatusess = "success"
)

func (e *ProductStatusess) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductStatusess(s)
	case string:
		*e = ProductStatusess(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductStatusess: %T", src)
	}
	return nil
}

type NullProductStatusess struct {
	ProductStatusess ProductStatusess
	Valid            bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductStatusess) Scan(value interface{}) error {
	if value == nil {
		ns.ProductStatusess, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductStatusess.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductStatusess) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.ProductStatusess, nil
}

type ProductTypes string

const (
	ProductTypesFood  ProductTypes = "food"
	ProductTypesGoods ProductTypes = "goods"
)

func (e *ProductTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductTypes(s)
	case string:
		*e = ProductTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductTypes: %T", src)
	}
	return nil
}

type NullProductTypes struct {
	ProductTypes ProductTypes
	Valid        bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductTypes) Scan(value interface{}) error {
	if value == nil {
		ns.ProductTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.ProductTypes, nil
}

type Role struct {
	ID        uuid.UUID    `json:"id"`
	Name      string       `json:"name"`
	CreatedAt time.Time    `json:"created_at"`
	DeletedAt sql.NullTime `json:"deleted_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

type Transaction struct {
	ID     uuid.UUID `json:"id"`
	UnitID uuid.UUID `json:"unit_id"`
	// nama kurir pengantar paket
	DeliveredBy string       `json:"delivered_by"`
	Type        ProductTypes `json:"type"`
	Qty         int32        `json:"qty"`
	// nama pemesan paket
	Owner string `json:"owner"`
	// nomor telpon pemesan paket
	Phone string `json:"phone"`
	// user yang menerima paket
	UserInID uuid.UUID `json:"user_in_id"`
	// user yang mengeluarkan paket
	UserOutID uuid.NullUUID `json:"user_out_id"`
	// nama pengambil paket
	PickedBy  sql.NullString `json:"picked_by"`
	PickedAt  sql.NullTime   `json:"picked_at"`
	DeletedAt sql.NullTime   `json:"deleted_at"`
	CreatedAt sql.NullTime   `json:"created_at"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
}

type Unit struct {
	ID             uuid.UUID     `json:"id"`
	No             string        `json:"no"`
	Email          string        `json:"email"`
	ItemPendingQty sql.NullInt32 `json:"item_pending_qty"`
	Phone          string        `json:"phone"`
	DeletedAt      sql.NullTime  `json:"deleted_at"`
	CreatedAt      sql.NullTime  `json:"created_at"`
	UpdatedAt      sql.NullTime  `json:"updated_at"`
}

type User struct {
	ID              uuid.UUID      `json:"id"`
	Name            string         `json:"name"`
	Email           string         `json:"email"`
	EmailVerifiedAt sql.NullTime   `json:"email_verified_at"`
	Password        string         `json:"password"`
	Token           sql.NullString `json:"token"`
	RoleID          uuid.UUID      `json:"role_id"`
	CreatedAt       time.Time      `json:"created_at"`
	DeletedAt       sql.NullTime   `json:"deleted_at"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
}
