// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: role.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
    name
) VALUES (
    $1
)
RETURNING id, name, created_at, deleted_at, updated_at
`

func (q *Queries) CreateRole(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRoleById = `-- name: DeleteRoleById :exec
UPDATE roles SET deleted_at = (now())
WHERE id = $1
`

func (q *Queries) DeleteRoleById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRoleById, id)
	return err
}

const getListRoles = `-- name: GetListRoles :many
SELECT id, name, created_at, deleted_at, updated_at FROM roles
WHERE deleted_at IS NULL
ORDER BY id
`

func (q *Queries) GetListRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getListRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleById = `-- name: GetRoleById :one
SELECT id, name, created_at, deleted_at, updated_at FROM roles
WHERE id = $1 and deleted_at IS NULL
`

func (q *Queries) GetRoleById(ctx context.Context, id uuid.UUID) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleById, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateNameRole = `-- name: UpdateNameRole :exec
UPDATE roles SET name = $1 
WHERE id = $2
`

type UpdateNameRoleParams struct {
	Name string    `json:"name"`
	ID   uuid.UUID `json:"id"`
}

func (q *Queries) UpdateNameRole(ctx context.Context, arg UpdateNameRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateNameRole, arg.Name, arg.ID)
	return err
}
