// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name, email, password, role_id
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, name, email, email_verified_at, password, token, role_id, created_at, deleted_at, updated_at
`

type CreateUserParams struct {
	Name     string        `json:"name"`
	Email    string        `json:"email"`
	Password string        `json:"password"`
	RoleID   uuid.NullUUID `json:"role_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.Password,
		&i.Token,
		&i.RoleID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :exec
UPDATE users SET deleted_at = (now())
WHERE id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const getListUsers = `-- name: GetListUsers :many
SELECT id, name, email, email_verified_at, password, token, role_id, created_at, deleted_at, updated_at FROM users
WHERE deleted_at IS NULL
ORDER BY id
`

func (q *Queries) GetListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getListUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.EmailVerifiedAt,
			&i.Password,
			&i.Token,
			&i.RoleID,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, email_verified_at, password, token, role_id, created_at, deleted_at, updated_at FROM users
WHERE id = $1 and deleted_at IS NULL
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.Password,
		&i.Token,
		&i.RoleID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePasswordUser = `-- name: UpdatePasswordUser :exec
UPDATE users SET password = $1 
WHERE id = $2
`

type UpdatePasswordUserParams struct {
	Password string    `json:"password"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) UpdatePasswordUser(ctx context.Context, arg UpdatePasswordUserParams) error {
	_, err := q.db.ExecContext(ctx, updatePasswordUser, arg.Password, arg.ID)
	return err
}
